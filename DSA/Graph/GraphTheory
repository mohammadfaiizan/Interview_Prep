# Graphs: A Comprehensive Overview for DSA Preparation

## **1. What is a Graph?**
A graph is a collection of:
- **Vertices (Nodes)**: Represent entities like cities, websites, or people.
- **Edges (Connections)**: Represent relationships or paths between vertices.

### **Key Terms**
- **Degree**: Number of edges connected to a vertex.
- **Path**: Sequence of vertices connected by edges.
- **Cycle**: Path where the start and end vertices are the same.

---

## **2. Types of Graphs**

### **Based on Edges**
- **Directed Graph (Digraph)**: Edges have direction (A → B).
- **Undirected Graph**: Edges are bidirectional (A ↔ B).

### **Based on Weights**
- **Weighted Graph**: Edges have weights (like distances or costs).
- **Unweighted Graph**: All edges are considered equal.

### **Based on Structure**
- **Cyclic Graph**: Contains a cycle (a path that starts and ends at the same vertex).
- **Acyclic Graph**: No cycles.
- **Connected Graph**: There’s a path between every pair of vertices.
- **Disconnected Graph**: Some vertices are not connected.

---

## **3. Graph Representation**

### **a. Adjacency Matrix**
- A 2D array where `matrix[i][j] = 1` if there’s an edge between vertex `i` and `j`.
- **Space Complexity**: O(V^2), where V is the number of vertices.

### **b. Adjacency List**
- An array of lists where each index represents a vertex, and the list contains its neighbors.
- **Space Complexity**: O(V + E), where E is the number of edges.

### **c. Edge List**
- A list of all edges in the graph, e.g., `[(A, B), (B, C)]`.
- Useful for algorithms like Kruskal’s MST.

---

## **4. Graph Traversal Algorithms**

### **a. Breadth-First Search (BFS)**
- Explores neighbors level by level.
- Uses a **queue**.
- **Time Complexity**: O(V + E).
- **Applications**: Shortest path in unweighted graphs, network broadcasting.

### **b. Depth-First Search (DFS)**
- Explores as far as possible along a branch before backtracking.
- Uses a **stack** (or recursion).
- **Time Complexity**: O(V + E).
- **Applications**: Detecting cycles, connected components.

---

## **5. Key Graph Algorithms**

### **a. Shortest Path Algorithms**
1. **Dijkstra's Algorithm**:
   - For graphs with non-negative weights.
   - Uses a priority queue.
   - **Time Complexity**: O((V + E) log V).

2. **Bellman-Ford Algorithm**:
   - Handles graphs with negative weights.
   - **Time Complexity**: O(V \* E).

3. **Floyd-Warshall Algorithm**:
   - All-pairs shortest path.
   - **Time Complexity**: O(V^3).

### **b. Minimum Spanning Tree (MST)**
1. **Kruskal’s Algorithm**:
   - Sorts edges and uses union-find to form the MST.
   - **Time Complexity**: O(E log E).

2. **Prim’s Algorithm**:
   - Grows the MST starting from an arbitrary vertex.
   - **Time Complexity**: O((V + E) log V).

### **c. Topological Sorting**
- For directed acyclic graphs (DAGs).
- Orders vertices such that all edges point in one direction.
- Uses DFS or Kahn’s algorithm.
- **Time Complexity**: O(V + E).

### **d. Strongly Connected Components (SCC)**
- Found using **Kosaraju’s Algorithm** or **Tarjan’s Algorithm**.
- **Time Complexity**: O(V + E).

### **e. Graph Coloring**
- Assign colors to vertices such that no two adjacent vertices share the same color.
- **Applications**: Scheduling problems, map coloring.

---

## **6. Practice Problems**

### **Easy**
1. Find the number of connected components in an undirected graph.
2. Implement BFS and DFS.

### **Medium**
1. Detect a cycle in a directed/undirected graph.
2. Shortest Path in an unweighted graph.

### **Hard**
1. Find the bridges in a graph (critical connections).
2. Implement Kruskal's or Prim's MST algorithm.
3. Solve the traveling salesman problem (TSP).

---

## **7. Advanced Topics**
- **Eulerian Path and Circuit**: A path that visits every edge exactly once.
- **Hamiltonian Path and Circuit**: A path that visits every vertex exactly once.
- **Network Flow Algorithms**: Ford-Fulkerson method for max flow problems.
- **Planarity Testing**: Check if a graph can be drawn without edge crossings.

---

### **Next Steps**
Would you like to explore implementations of specific algorithms (like BFS, DFS, or Dijkstra’s) or dive deeper into solving some of the practice problems?

